version: "3.4"

x-common-variables: &common-build-variables
  # Brukes for å installere navikt-private maven-dependencies
  # Trenger auth for mvn clean install, kjør `yarn setup:docker:env` for å konfigurere
  github_username: ${GITHUB_USER}
  github_token: ${GITHUB_TOKEN}

x-common-token-environment: &common-token-environment
  LOGINSERVICE_IDPORTEN_DISCOVERY_URL: http://oauthmock:8080/fake/.well-known/openid-configuration
  # Hardkodet i fakedings for fake idporten
  LOGINSERVICE_IDPORTEN_AUDIENCE: "notfound"
  TOKEN_X_WELL_KNOWN_URL: http://oauthmock:8080/tokenx/.well-known/openid-configuration

x-common-log-config: &common-log-config
  options:
    max-size: 50k

volumes:
  keys:
  secure-logs:

services:
  frontend:
    logging: *common-log-config
    container_name: "frontend"
    build:
      context: ./
      target: webpack-express-deps-builder # Før vi bygger og sletter dev-dependencies
    command: ["yarn", "start:dev:ts-server"]
    environment:
      <<: *common-token-environment
      BASE_PATH: /familie/barnetrygd/soknad/ordinaer/
      ENV: docker-compose
      # FORCE_DISABLED: 1 # Uncomment for å utvikle disabled-appen
    volumes:
      - ./src:/var/server/src
      - secure-logs:/secure-logs
    ports:
      - "3000:3000"
      - "55554:55554"

  # Brukes ikke ved vanlig kjøring, kan uppes istedenfor frontend-servicen for å sjekke at
  # prod-images kjører OK.
  #
  # Akkurat denne servicen krever buildkit for å bygges
  # For å uppe denne servicen må du kjøre docker-compose med følgende env variabler satt
  # DOCKER_BUILDKIT=1
  # COMPOSE_DOCKER_CLI_BUILD=1
  #
  # Altså `DOCKER_BUILDKIT=1 COMPOSE_DOCKER_CLI_BUILD=1 docker-compose up -d --build frontend-prod`
  #
  # Vi kan ikke bruke buildkit for hele stacken, siden buildkit ikke støtter git subdirectory contexts,
  # som vi bruker for ldap, zookeper og kafka
  frontend-prod:
    profiles:
      - test-prod-build
    logging: *common-log-config
    container_name: "frontend-prod"
    build:
      context: ./
      target: prod-runner # Samme docker image som kjører i preprod og prod
      args:
        base_path: /familie/barnetrygd/soknad/ordinaer/
    environment:
      <<: *common-token-environment
      BASE_PATH: /familie/barnetrygd/soknad/ordinaer/
      ENV: docker-compose-prod
      # FORCE_DISABLED: 1 # Uncomment for å utvikle disabled-appen
    volumes:
      - secure-logs:/secure-logs
    ports:
      - "3000:3000"

  # familie-ba-soknad-api, henter bl.a. data fra PDL og forwarder søknader til mottak
  api:
    logging: *common-log-config
    container_name: "soknad-api"
    build:
      context: dockerstuff/soknad-api
      args:
        <<: *common-build-variables
        git_commit: b9d16c17fa8664c259d87a38abc489ef06ee2eb8
    depends_on:
      - key_generator
      - oauthmock
    volumes:
      - secure-logs:/secure-logs
      - keys:/keys
    environment:
      <<: *common-token-environment
      TOKEN_X_PRIVATE_JWK: '/keys/familie-ba-soknad-api.json'
      TOKEN_X_CLIENT_ID: 'dev-local:teamfamilie:familie-ba-soknad-api'
      FAMILIE_BA_MOTTAK_URL: 'http://mottak:8090'

  # familie-ba-mottak, tar imot søknader, lagrer dem, genererer PDFer via dokgen, sender til journalføring.
  # henter også og lagrer vedlegg fra familie-dokument
  mottak:
    logging: *common-log-config
    container_name: "mottak"
    build:
      context: dockerstuff/mottak
      args:
        <<: *common-build-variables
        git_commit: 827a9a8b80536a58a770b2fda0de800d8f11b1eb
    depends_on:
      - key_generator
      - postgres
      - kafka
      - configurator
      - oauthmock
    volumes:
      - keys:/keys
      - secure-logs:/secure-logs
    environment:
      <<: *common-token-environment
      TOKEN_X_PRIVATE_JWK: '/keys/familie-ba-mottak.json'
      TOKEN_X_CLIENT_ID: 'dev-local:teamfamilie:familie-ba-mottak'
      KAFKA_BROKERS: http://kafka:9092
      FAMILIE_DOKUMENT_API_URL: http://dokument:8082
      FAMILIE_BA_DOKGEN_API_URL: http://dokgen:8080
      FAMILIE_INTEGRASJONER_API_URL: http://journalforing

  # familie-dokument, mellomlagring og dokumentopplasting
  dokument:
    logging: *common-log-config
    container_name: "familie-dokument"
    build:
      context: dockerstuff/dokument
      args:
        <<: *common-build-variables
        git_commit: 5730545eaf45b8ed4c0ace57254b76599c809f5c
    depends_on:
      - key_generator
      - oauthmock
    volumes:
      - keys:/keys
      - secure-logs:/secure-logs
    ports:
      - "8082:8082"
    environment:
      <<: *common-token-environment
      TOKEN_X_PRIVATE_JWK: '/keys/familie-dokument.json'
      TOKEN_X_CLIENT_ID: 'dev-local:teamfamilie:familie-dokument'

  # familie-ba-dokgen, genererer PDF/A-filer på request fra mottak
  dokgen:
    logging: *common-log-config
    container_name: dokgen
    build:
      context: "https://${GITHUB_TOKEN}:@github.com/navikt/familie-ba-dokgen.git#c3289add7bd4c8fc00f055142439d2edac25627a"
    environment:
      RUNTIME_OPTS: "--write.access=true"
    ports:
      - "5914:8080"
    volumes:
      - secure-logs:/secure-logs
      # - ../familie-ba-dokgen/content:/app/content
    user: root # ellers klager den så fælt på permissions til /secure-logs

  # Fake tokenx, gir akkurat det den blir bedt om. Når loginservice ber om en
  # selvbetjeningstoken gir den det, når api/mottak/dokument ber om on-behalf-of
  # tokens for å snakke med hverandre gir den det, og når frontend/api/mottak/dokument
  # spør om tokenet de får er gyldige svarer den ja på det og siden den selv har issuet
  # tokenene.
  oauthmock:
    logging: *common-log-config
    container_name: "idporten-ish"
    image: "ghcr.io/navikt/fakedings/fakedings:b1244f187badb294b47e0e3c3042abec91e04658"
    ports:
      - "8083:8080"

  # Fake loginservice, henter idtokens fra oauthmock
  loginservice:
    logging: *common-log-config
    depends_on:
      - oauthmock
    build:
      context: dockerstuff/loginservice
    ports:
      - "8080:80"
    environment:
      FAKEDINGS_ADDRESS: "http://oauthmock:8080"
      TOKEN_COOKIE_NAME: "selvbetjening-idtoken"

  # Slutten på stacken, tar imot journalføringsrequests fra mottak og lagrer alt til disk
  journalforing:
    logging: *common-log-config
    build:
      context: dockerstuff/journalføring
    volumes:
      - ./var/mottatte_soknader:/var/mottatte_soknader
    environment:
      STORAGE_DIRECTORY: /var/mottatte_soknader

  # Genererer JWK-filer (json web keys, motpart til jwt) for api/mottak/dokument, slik at de kan
  # signere requests de sender til hverandre med token exchange
  # Det er meningen at denne skal starte, generere keys, og skru seg selv av
  key_generator:
    logging: *common-log-config
    container_name: "jwk-generator"
    # Will generate tokenx keys and then shut down
    build:
      context: dockerstuff/jwker
      args:
        git_commit: 850963d98bfd4e04836212fcb2efb218d56db7f5
    environment:
      APPS: "familie-ba-soknad-api,familie-ba-mottak,familie-dokument"
      KEY_OUTPUT_DIRECTORY: /keys
    volumes:
      - keys:/keys

  # Database der mottak lagrer søknader og vedlegg
  postgres:
    logging: *common-log-config
    image: "postgres"
    container_name: "postgres"
    ports:
      - "5432:5432"
    environment:
      POSTGRES_PASSWORD: "test"
      POSTGRES_USER: "postgres"
      POSTGRES_DB: "familie-ba-mottak"

  # Denne er bare hvis du trenger å logge inn i en docker-service for å se om de andre kan nås på det interne nettverket
  # For eks.
  # $ docker-compose exec testentry sh
  # / # apk add curl
  # / # curl api:8080/internal
  testentry:
    logging: *common-log-config
    container_name: "test-entry"
    image: alpine
    command: ["sleep", "10000000"]
    volumes:
      - keys:/keys
      - secure-logs:/secure-logs

  # Kjører curl-kommandoer definert i familie-ba-mottak README.md for å konfigurere kafka
  # Det er meningen at denne skal starte, konfigurere kafka, og skru seg selv av.
  configurator:
    logging: *common-log-config
    container_name: "cluster-configurator"
    build:
      context: dockerstuff/configurator
    restart: on-failure
    depends_on:
      - kafka
      - kafkadminrest
    environment:
      KAFKA_ADMIN_ADDRESS: "kafkadminrest:8080"


  # Herifra og ned er bare kafka-services definert i github.com/navikt/navkafka-docker-compose i docker-compose.yml
  # Trengs for å kjøre mottak

  openldap:
    logging: *common-log-config
    build:
      context: https://github.com/navikt/navkafka-docker-compose.git#:ldap
    container_name: ldap
    ports:
      - "10636:636"
      - "10389:389"
    environment:
      - "LDAP_TLS_VERIFY_CLIENT=try"

  zookeeper:
    logging: *common-log-config
    build:
      context: https://github.com/navikt/navkafka-docker-compose.git#:zookeeper
    container_name: zookeeper
    environment:
      - "ZOOKEEPER_CLIENT_PORT=2181"
      - "ZOOKEEPER_AUTH_PROVIDER_1=org.apache.zookeeper.server.auth.SASLAuthenticationProvider"
    ports:
      - "2181:2181"

  kafka:
    logging: *common-log-config
    build:
      context: https://github.com/navikt/navkafka-docker-compose.git#:kafka
    container_name: kafka
    restart: unless-stopped
    environment:
      - "KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181"
      - "KAFKA_LISTENERS=SASLPLAINTEXT://0.0.0.0:9092,SASLINTERNAL://kafka:9093"
      - "KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=SASLPLAINTEXT:SASL_PLAINTEXT,SASLINTERNAL:SASL_PLAINTEXT"
      - "KAFKA_ADVERTISED_LISTENERS=SASLPLAINTEXT://kafka:9092,SASLINTERNAL://kafka:9093"
      - "KAFKA_PROTOCOL_NAME=SASLPLAINTEXT,SASLINTERNAL"
      - "KAFKA_LISTENER_NAME_SASLPLAINTEXT_PLAIN_SASL_SERVER_CALLBACK_HANDLER_CLASS=no.nav.common.security.authentication.SimpleLDAPAuthentication"
      - "KAFKA_LISTENER_NAME_SASLINTERNAL_PLAIN_SASL_SERVER_CALLBACK_HANDLER_CLASS=no.nav.common.security.authentication.SimpleLDAPAuthentication"
      - "KAFKA_AUTHORIZER_CLASS_NAME=no.nav.common.security.authorization.SimpleLDAPAuthorizer"
      - "KAFKA_SUPER_USERS=User:igroup"
      - "KAFKA_INTER_BROKER_LISTENER_NAME=SASLINTERNAL"
      - "KAFKA_SASL_MECHANISM_INTER_BROKER_PROTOCOL=PLAIN"
      - "KAFKA_SASL_ENABLED_MECHANISMS=PLAIN"
      - "KAFKA_DEFAULT_REPLICATION_FACTOR=1"
      - "KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1"
      - "KAFKA_AUTO_CREATE_TOPICS_ENABLE=false"
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
      - openldap

  kafkadminrest:
    logging: *common-log-config
    image: "navikt/kafka-adminrest"
    ports:
      - "8840:8080"
    environment:
      - "LDAP_CONNTIMEOUT=2000"
      - "LDAP_USERATTRNAME=cn"
      - "LDAP_AUTH_HOST=ldap"
      - "LDAP_AUTH_PORT=636"
      - "LDAP_SRVUSERBASE=OU=ServiceAccounts,DC=test,DC=local"
      - "LDAP_GROUPBASE=OU=kafka,OU=AccountGroupNotInRemedy,OU=Groups,OU=NAV,OU=BusinessUnits,DC=test,DC=local"
      - "LDAP_GROUPATTRNAME=cn"
      - "LDAP_GRPMEMBERATTRNAME=member"
      - "LDAP_USER=igroup"
      - "LDAP_PASSWORD=itest"
      - "KAFKA_BROKERS=kafka:9093"
      - "KAFKA_CLIENTID=kafka-adminrest"
      - "KAFKA_SECURITY=TRUE"
      - "KAFKA_SECPROT=SASL_PLAINTEXT"
      - "KAFKA_SASLMEC=PLAIN"
      - "KAFKA_USER=igroup"
      - "LDAP_HOST=ldap"
      - "LDAP_PORT=636"
      - "LDAP_AUTH_USERBASE=ou=Users,ou=NAV,dc=test,dc=local"
      - "KAFKA_PASSWORD=itest"

  schema-registry:
    logging: *common-log-config
    image: "confluentinc/cp-schema-registry:5.0.1"
    depends_on:
      - zookeeper
      - kafka
    ports:
      - "8081:8081"
    environment:
      - "SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS=SASL_PLAINTEXT://kafka:9093"
      - "SCHEMA_REGISTRY_KAFKASTORE_SASL_MECHANISM=PLAIN"
      - "SCHEMA_REGISTRY_KAFKASTORE_SASL_JAAS_CONFIG=org.apache.kafka.common.security.plain.PlainLoginModule required username=\"igroup\" password=\"itest\";"
      - "SCHEMA_REGISTRY_KAFKASTORE_SECURITY_PROTOCOL=SASL_PLAINTEXT"
      - "SCHEMA_REGISTRY_HOST_NAME=schema-registry"
      - "SCHEMA_REGISTRY_LISTENERS=http://0.0.0.0:8081"

